name: Analyze Dependencies

on:
  issues:
    types: [opened]

jobs:
  analyze:
    if: github.event.issue.title == 'update dependencies'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install @octokit/rest d3 jsdom

      - name: Create visualizations directory
        run: mkdir -p visualizations

      - name: Run dependency analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > analyze.js << 'EOL'
          // Keep require for built-in modules
          const fs = require('fs');
          const path = require('path');
          
          // Use dynamic import for ESM modules within an async context
          // We'll perform the imports inside the async main function
          
          async function main() {
            // Dynamically import necessary ES modules
            const { Octokit } = await import('@octokit/rest');
            const { JSDOM } = await import('jsdom');
            const d3 = await import('d3');
          
            console.log('Starting dependency analysis...');
          
            // Setup GitHub client (now using the imported Octokit)
            const octokit = new Octokit({
              auth: process.env.GITHUB_TOKEN
            });
          
            // Create directory for visualizations if it doesn't exist
            // ... (rest of your main function remains the same) ...
          
            // Search for repositories...
            const repos = await searchRepos(octokit); // Pass octokit instance
            console.log(`Found ${repos.length} repositories to analyze`);
          
            // Get dependencies for each repository...
            const dependencies = await getDependencies(repos, octokit); // Pass octokit instance
          
            // Generate visualization...
            generateVisualization(dependencies, d3, JSDOM); // Pass d3 and JSDOM
          
            console.log('Analysis complete!');
          }
          
          // --- Helper function modifications ---
          // Pass octokit/d3/JSDOM instances to helper functions that need them
          
          async function searchRepos(octokit) { // Added octokit parameter
            let repos = [];
            let page = 1;
            let hasMorePages = true;
          
            while (hasMorePages) {
              // Use the passed octokit instance
              const response = await octokit.search.repos({
                q: 'org:facebook react in:name',
                per_page: 100,
                page: page
              });
          
              repos = repos.concat(response.data.items);
              hasMorePages = response.data.items.length === 100;
              page++;
            }
          
            return repos;
          }
          
          async function getDependencies(repos, octokit) { // Added octokit parameter
            const dependencies = new Map();
          
            for (const repo of repos) {
              try {
                // Pass octokit instance
                const packageJson = await getPackageJson(repo.owner.login, repo.name, octokit);
          
                if (packageJson) {
                  const deps = {
                    ...(packageJson.dependencies || {}),
                    ...(packageJson.devDependencies || {})
                  };
                  dependencies.set(repo.name, deps);
                  console.log(`Processed ${repo.name}`);
                }
              } catch (error) {
                console.error(`Error processing ${repo.name}: ${error.message}`);
              }
            }
          
            return dependencies;
          }
          
          async function getPackageJson(owner, repo, octokit) { // Added octokit parameter
            try {
              // Use the passed octokit instance
              const response = await octokit.repos.getContent({
                owner,
                repo,
                path: 'package.json'
              });
          
              const content = Buffer.from(response.data.content, 'base64').toString();
              return JSON.parse(content);
            } catch (error) {
              if (error.status === 404) {
                console.log(`No package.json found for ${owner}/${repo}`);
                return null;
              }
              throw error;
            }
          }
          
          function generateVisualization(dependencies, d3, JSDOM) { // Added d3 and JSDOM parameters
            const nodes = [];
            const links = [];
          
            for (const [repoName] of dependencies) {
              nodes.push({ id: repoName, group: 1 });
            }
          
            for (const [repoName, deps] of dependencies) {
              for (const depName in deps) {
                if (dependencies.has(depName)) {
                  links.push({
                    source: repoName,
                    target: depName,
                    value: 1
                  });
                }
              }
            }
          
            // Use the passed JSDOM instance
            const { window } = new JSDOM('<!DOCTYPE html><html><body></body></html>');
            const document = window.document;
            // No need for global.document = document; typically
          
            const width = 960;
            const height = 600;
          
            // Use the passed d3 instance
            const svg = d3.select(document.body)
              .append('svg')
              .attr('width', width)
              .attr('height', height)
              .attr('xmlns', 'http://www.w3.org/2000/svg');
          
            const simulation = d3.forceSimulation(nodes)
              .force('link', d3.forceLink(links).id(d => d.id))
              .force('charge', d3.forceManyBody().strength(-300))
              .force('center', d3.forceCenter(width / 2, height / 2));
          
            const link = svg.append('g')
              // ... rest of D3 code ...
          
            const node = svg.append('g')
              // ... rest of D3 code ...
          
            const text = svg.append('g')
              // ... rest of D3 code ...
          
            for (let i = 0; i < 100; i++) {
              simulation.tick();
            }
          
            link
              .attr('x1', d => d.source.x)
              // ... rest of D3 code ...
          
            node
              .attr('cx', d => d.x)
              // ... rest of D3 code ...
          
            text
              .attr('x', d => d.x)
              // ... rest of D3 code ...
          
            const svgOutput = document.body.innerHTML;
            fs.writeFileSync(path.join('visualizations', 'dependency-graph.svg'), svgOutput);
            console.log('Dependency graph saved to visualizations/dependency-graph.svg');
          }
          
          // Call main at the end
          main().catch(error => {
            console.error('Error in dependency analysis:', error);
            process.exit(1);
          });
          EOL
          
          node analyze.js

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Commit and push changes
        run: |
          git add visualizations/
          git commit -m "Update dependency graph visualization" -a || echo "No changes to commit"
          git push
